<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fiction.mapper.UserInformationMapper">
    <resultMap id="BaseResultMap" type="com.fiction.entity.UserInformation">
        <id column="user_id" jdbcType="INTEGER" property="userId"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="type" jdbcType="INTEGER" property="type"/>
        <result column="sex" jdbcType="VARCHAR" property="sex"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="national" jdbcType="VARCHAR" property="national"/>
        <result column="signature" jdbcType="VARCHAR" property="signature"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        user_id, user_name, `type`, sex, email, `national`, signature
    </sql>
    <select id="selectByExample" parameterType="com.fiction.example.UserInformationExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from userinformation
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from userinformation
        where user_id = #{userId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from userinformation
        where user_id = #{userId,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.fiction.example.UserInformationExample">
        delete from userinformation
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.fiction.entity.UserInformation">
        insert into userinformation (user_id, user_name, `type`,
                                     sex, email, `national`,
                                     signature)
        values (#{userId,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER},
                #{sex,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{national,jdbcType=VARCHAR},
                #{signature,jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.fiction.entity.UserInformation">
        insert into userinformation
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                user_id,
            </if>
            <if test="userName != null">
                user_name,
            </if>
            <if test="type != null">
                `type`,
            </if>
            <if test="sex != null">
                sex,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="national != null">
                `national`,
            </if>
            <if test="signature != null">
                signature,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="userName != null">
                #{userName,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                #{type,jdbcType=INTEGER},
            </if>
            <if test="sex != null">
                #{sex,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="national != null">
                #{national,jdbcType=VARCHAR},
            </if>
            <if test="signature != null">
                #{signature,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.fiction.example.UserInformationExample" resultType="java.lang.Long">
        select count(*) from userinformation
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update userinformation
        <set>
            <if test="record.userId != null">
                user_id = #{record.userId,jdbcType=INTEGER},
            </if>
            <if test="record.userName != null">
                user_name = #{record.userName,jdbcType=VARCHAR},
            </if>
            <if test="record.type != null">
                `type` = #{record.type,jdbcType=INTEGER},
            </if>
            <if test="record.sex != null">
                sex = #{record.sex,jdbcType=VARCHAR},
            </if>
            <if test="record.email != null">
                email = #{record.email,jdbcType=VARCHAR},
            </if>
            <if test="record.national != null">
                `national` = #{record.national,jdbcType=VARCHAR},
            </if>
            <if test="record.signature != null">
                signature = #{record.signature,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update userinformation
        set user_id = #{record.userId,jdbcType=INTEGER},
        user_name = #{record.userName,jdbcType=VARCHAR},
        `type` = #{record.type,jdbcType=INTEGER},
        sex = #{record.sex,jdbcType=VARCHAR},
        email = #{record.email,jdbcType=VARCHAR},
        `national` = #{record.national,jdbcType=VARCHAR},
        signature = #{record.signature,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.fiction.entity.UserInformation">
        update userinformation
        <set>
            <if test="userName != null">
                user_name = #{userName,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                `type` = #{type,jdbcType=INTEGER},
            </if>
            <if test="sex != null">
                sex = #{sex,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="national != null">
                `national` = #{national,jdbcType=VARCHAR},
            </if>
            <if test="signature != null">
                signature = #{signature,jdbcType=VARCHAR},
            </if>
        </set>
        where user_id = #{userId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.fiction.entity.UserInformation">
        update userinformation
        set user_name  = #{userName,jdbcType=VARCHAR},
            `type`     = #{type,jdbcType=INTEGER},
            sex        = #{sex,jdbcType=VARCHAR},
            email      = #{email,jdbcType=VARCHAR},
            `national` = #{national,jdbcType=VARCHAR},
            signature  = #{signature,jdbcType=VARCHAR}
        where user_id = #{userId,jdbcType=INTEGER}
    </update>
    <select id="selectOneByExample" parameterType="com.fiction.example.UserInformationExample"
            resultMap="BaseResultMap">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
          @project https://github.com/itfsw/mybatis-generator-plugin
        -->
        select
        <include refid="Base_Column_List"/>
        from userinformation
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        limit 1
    </select>
    <select id="selectByExampleWithRowbounds" parameterType="com.fiction.example.UserInformationExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from userinformation
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByName" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from userinformation
        where user_name like "%" #{userName} "%";
    </select>
</mapper>